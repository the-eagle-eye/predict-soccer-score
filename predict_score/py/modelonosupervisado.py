# -*- coding: utf-8 -*-
"""ModeloNoSupervisado.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yeDpmX6BRVEyLaPpL8R72c3DBLuM94p2

**MODELO NO SUPERVISADO KMeans**
"""

# Importar librerías necesarias
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import seaborn as sns
import matplotlib.pyplot as plt

# List of URLs of the datasets
urls = [
    "https://www.football-data.co.uk/mmz4281/2425/E0.csv",
    "https://www.football-data.co.uk/mmz4281/2324/E0.csv",
    "https://www.football-data.co.uk/mmz4281/2223/E0.csv",
    "https://www.football-data.co.uk/mmz4281/2122/E0.csv",
    "https://www.football-data.co.uk/mmz4281/2021/E0.csv",
    "https://www.football-data.co.uk/mmz4281/1920/E0.csv"
]

# Cargar todos los CSVs
dfs = [pd.read_csv(url) for url in urls]

# Visualizar las primeras filas de cada dataset para inspeccionar la estructura
for i, df in enumerate(dfs):
    print(f"DataFrame {i+1}:")
    print(df.head(), "\n")

# Unir todos los DataFrames en uno solo
dataset = pd.concat(dfs, ignore_index=True)

# Verificar el tamaño del DataFrame combinado
print(dataset.shape)

# Seleccionar columnas relevantes

#FTHG =Goles del Equipo Local al Final del Partido
#FTAG =Goles del Equipo Visitante al Final del Partido
#HS  =Disparos del Equipo Local
#AS=Disparos del Equipo Visitante
#HST =Disparos a puerta del Equipo Local
#AST=Disparos a puerta del Equipo Visitante
#HC=Córners del Equipo Local
#AC=Córners del Equipo Visitante
#HY=Tarjetas Amarillas al Equipo Local
#AY=Tarjetas Amarillas al Equipo Visitante
#HR=Tarjetas Rojas al Equipo Local
#AR =Tarjetas Rojas al Equipo Visitante
VARS = ['FTHG', 'FTAG', 'HS', 'AS', 'HST', 'AST', 'HC', 'AC', 'HY', 'AY', 'HR', 'AR']
train = dataset[VARS]

# Rellenar valores nulos (si existen) con ceros
train = train.fillna(0)

train.head()

# Escalar las características
scaler = StandardScaler()
train_scaled = scaler.fit_transform(train)

#MODELO KMEANS
modelo_kmeans = KMeans(n_clusters=3, random_state=42)
modelo_kmeans.fit(train_scaled)
dataset['cluster_kmeans'] = modelo_kmeans.labels_

#Analizando los clusters
sns.boxplot(data = dataset, x='cluster_kmeans', y='FTAG')
plt.show

##saber que partidos hay en el cluster 1
dataset[dataset['cluster_kmeans'] == 1]

#Para escoger el num de clusteres
##Metodo del codo
inertia = []
for k in range(1, 10):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(train_scaled)
    inertia.append(kmeans.inertia_)


plt.plot(range(1, 10), inertia, marker='o')
plt.xlabel('Número de clusters')
plt.ylabel('Inercia')
plt.title('Método del Codo')
plt.show()

# Aplicar K-Means con 3 clusters
kmeans = KMeans(n_clusters=3, random_state=42)
clusters = kmeans.fit_predict(train_scaled)

# Agregar los clusters al DataFrame original indicando a cuál grupo
dataset['Cluster'] = clusters

# Calcular promedios de características por cluster
cluster_analysis = dataset.groupby('Cluster')[VARS].mean()
print(cluster_analysis)

# Basado en los promedios, mapeamos los clusters a categorías
cluster_to_result = {0: 'Lose', 1: 'Draw', 2: 'Win'}  # Ajusta según el análisis
dataset['Result'] = dataset['Cluster'].map(cluster_to_result)

#FTHG =Goles del Equipo Local al Final del Partido
#FTAG =Goles del Equipo Visitante al Final del Partido
#HS  =Disparos del Equipo Local
#AS=Disparos del Equipo Visitante
#HST =Disparos a puerta del Equipo Local
#AST=Disparos a puerta del Equipo Visitante
#HC=Córners del Equipo Local
#AC=Córners del Equipo Visitante
#HY=Tarjetas Amarillas al Equipo Local
#AY=Tarjetas Amarillas al Equipo Visitante
#HR=Tarjetas Rojas al Equipo Local
#AR =Tarjetas Rojas al Equipo Visitante

# Mapear resultados reales a números
dataset['FTR_Numeric'] = dataset['FTR'].map({'H': 0, 'D': 1, 'A': 2})  # H=Win HOME, D=Draw, A=WIN AWAY

# Crear una tabla de contingencia
contingency_table = pd.crosstab(dataset['Cluster'], dataset['FTR_Numeric'])
print(contingency_table)

# Reducir dimensiones a 2 con PCA
pca = PCA(n_components=2)
pca_data = pca.fit_transform(train_scaled)

# Graficar los clusters
plt.figure(figsize=(8, 6))
plt.scatter(pca_data[:, 0], pca_data[:, 1], c=clusters, cmap='viridis', alpha=0.6)
plt.title('Clusters de Partidos (K-Means con PCA)')
plt.xlabel('Componente Principal 1')
plt.ylabel('Componente Principal 2')
plt.colorbar(label='Cluster')
plt.show()

# # Filtrar equipos por cluster

for cluster in dataset['Cluster'].unique():
    print(f"\nEquipos en el Cluster {cluster}:")

    # Equipos en el cluster 'cluster'
    home_teams = dataset[dataset['Cluster'] == cluster]['HomeTeam'].unique()
    away_teams = dataset[dataset['Cluster'] == cluster]['AwayTeam'].unique()

    # Mostrar equipos de manera más ordenada
    print(f"\n  Equipos Locales ({len(home_teams)}):")
    for team in home_teams:
        print(f"    - {team}")

    print(f"\n  Equipos Visitantes ({len(away_teams)}):")
    for team in away_teams:
        print(f"    - {team}")

# Ejemplo de equipos a comparar
local = "Tottenham"
visita = "Man City"


# Filtramos los partidos de cada equipo y obtenemos el cluster correspondiente
equipo_1_cluster = dataset[dataset['HomeTeam'] == local]['Cluster'].mode()[0]  # Usamos el modo para elegir el cluster más frecuente
equipo_2_cluster = dataset[dataset['AwayTeam'] == visita]['Cluster'].mode()[0]

# Obtener las estadísticas promedias de cada cluster
cluster_1_stats = cluster_analysis.loc[equipo_1_cluster]
cluster_2_stats = cluster_analysis.loc[equipo_2_cluster]

# Mostrar las estadísticas de cada equipo
print(f"Estadísticas promedio para {local} (Cluster {equipo_1_cluster}):")
print(cluster_1_stats)

print(f"\nEstadísticas promedio para {visita} (Cluster {equipo_2_cluster}):")
print(cluster_2_stats)

# Comparar: por ejemplo, comparamos los goles a favor (FTHG) y los tiros a puerta (HST)
if cluster_1_stats['FTHG'] > cluster_2_stats['FTHG']:
    print(f"\n{local} tiene más probabilidades de ganar (goles a favor).")
else:
    print(f"\n{visita} tiene más probabilidades de ganar (goles a favor).")

if cluster_1_stats['HST'] > cluster_2_stats['HST']:
    print(f"{local} también tiene más tiros a puerta.")
else:
    print(f"{visita} también tiene más tiros a puerta.")

